import asyncio
import logging

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
API_TOKEN = "YOUR_BOT_TOKEN"
ADMIN_CHAT = "@ivan_yas"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º FSM –¥–ª—è –æ–ø—Ä–æ—Å–∞
class MentorForm(StatesGroup):
    name = State()
    role = State()
    direction = State()
    level = State()
    skills = State()
    goal = State()
    issues = State()
    time = State()
    format = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —á–µ–∫-–ª–∏—Å—Ç –¥–ª—è –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", parse_mode=types.ParseMode.HTML)
    await state.set_state(MentorForm.name)

@dp.message(MentorForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("üë§ <b>–ö—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å?</b> (–°—Ç—É–¥–µ–Ω—Ç, –Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –æ–ø—ã—Ç–Ω—ã–π –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ —Ç. –¥.)", parse_mode=types.ParseMode.HTML)
    await state.set_state(MentorForm.role)

@dp.message(MentorForm.role)
async def process_role(message: types.Message, state: FSMContext):
    await state.update_data(role=message.text)
    await message.answer("üíº <b>–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ò–¢ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?</b> (–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –ò–ë, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, DevOps, –¥—Ä—É–≥–æ–µ)", parse_mode=types.ParseMode.HTML)
    await state.set_state(MentorForm.direction)

@dp.message(MentorForm.direction)
async def process_direction(message: types.Message, state: FSMContext):
    await state.update_data(direction=message.text)
    await message.answer("üéØ <b>–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π?</b> (–ù–æ–≤–∏—á–æ–∫, –∑–Ω–∞—é –æ—Å–Ω–æ–≤—ã, –µ—Å—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –æ–ø—ã—Ç)", parse_mode=types.ParseMode.HTML)
    await state.set_state(MentorForm.level)

@dp.message(MentorForm.level)
async def process_level(message: types.Message, state: FSMContext):
    await state.update_data(level=message.text)
    await message.answer("üìä <b>–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å?</b> (–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã)", parse_mode=types.ParseMode.HTML)
    await state.set_state(MentorForm.skills)

@dp.message(MentorForm.skills)
async def process_skills(message: types.Message, state: FSMContext):
    await state.update_data(skills=message.text)
    await message.answer("üèÜ <b>–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?</b> (–í–æ–π—Ç–∏ –≤ –ò–¢, —Å–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ø–æ–ª—É—á–∏—Ç—å –æ—Ñ—Ñ–µ—Ä, –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫–∏)", parse_mode=types.ParseMode.HTML)
    await state.set_state(MentorForm.goal)

@dp.message(MentorForm.goal)
async def process_goal(message: types.Message, state: FSMContext):
    await state.update_data(goal=message.text)
    await message.answer("‚ö†Ô∏è <b>–ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º–µ—à–∞—é—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?</b> (–ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å / –Ω–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏ / –Ω–µ –ø—Ä–æ—Ö–æ–∂—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è)", parse_mode=types.ParseMode.HTML)
    await state.set_state(MentorForm.issues)

@dp.message(MentorForm.issues)
async def process_issues(message: types.Message, state: FSMContext):
    await state.update_data(issues=message.text)
    await message.answer("‚è≥ <b>–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å –æ–±—É—á–µ–Ω–∏—é?</b> (1-2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å, 5+ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –∏ —Ç. –¥.)", parse_mode=types.ParseMode.HTML)
    await state.set_state(MentorForm.time)

@dp.message(MentorForm.time)
async def process_time(message: types.Message, state: FSMContext):
    await state.update_data(time=message.text)
    await message.answer("üìû <b>–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞ —Ç–µ–±–µ —É–¥–æ–±–µ–Ω?</b> (–ß–∞—Ç, —Å–æ–∑–≤–æ–Ω—ã, —Ä–∞–∑–±–æ—Ä –∑–∞–¥–∞—á, —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º)", parse_mode=types.ParseMode.HTML)
    await state.set_state(MentorForm.format)

@dp.message(MentorForm.format)
async def process_format(message: types.Message, state: FSMContext):
    await state.update_data(format=message.text)
    data = await state.get_data()
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —ç–º–æ–¥–∑–∏
    result_text = (
        "<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ!</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data.get('name')}\n"
        f"üíº <b>–ö—Ç–æ —Å–µ–π—á–∞—Å:</b> {data.get('role')}\n"
        f"üéØ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {data.get('direction')}\n"
        f"üìä <b>–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:</b> {data.get('level')}\n"
        f"üõ† <b>–ù–∞–≤—ã–∫–∏:</b> {data.get('skills')}\n"
        f"üèÜ <b>–¶–µ–ª—å:</b> {data.get('goal')}\n"
        f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã:</b> {data.get('issues')}\n"
        f"‚è≥ <b>–í—Ä–µ–º—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ:</b> {data.get('time')}\n"
        f"üìû <b>–§–æ—Ä–º–∞—Ç –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞:</b> {data.get('format')}\n"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å HTML-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    await bot.send_message(ADMIN_CHAT, result_text, parse_mode=types.ParseMode.HTML)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–Ω—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!", parse_mode=types.ParseMode.HTML)
    await state.clear()

# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Health Probe —á–µ—Ä–µ–∑ FastAPI
from fastapi import FastAPI
from fastapi.responses import JSONResponse

health_app = FastAPI()

@health_app.get("/health")
async def health():
    return JSONResponse(content={"status": "ok"})

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∏ HTTP-—Å–µ—Ä–≤–µ—Ä –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
import uvicorn

async def main():
    # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∑–∞–¥–∞—á–∏: polling –±–æ—Ç–∞ –∏ uvicorn –¥–ª—è FastAPI
    bot_task = asyncio.create_task(dp.start_polling(bot))
    config = uvicorn.Config(health_app, host="0.0.0.0", port=8080, log_level="info")
    server = uvicorn.Server(config)
    health_task = asyncio.create_task(server.serve())
    await asyncio.gather(bot_task, health_task)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.exception("Error in main: %s", e)