import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import StatesGroup, State
from aiogram.enums import ParseMode
from aiogram.types import BotCommand

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
API_TOKEN = "7587439282:AAGXUVVsgplLLU3pD0K1hn5JQThMoUY20Jk"
ADMIN_CHAT = 1270626619

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

submitted_applications = {}


class MentorForm(StatesGroup):
    name = State()
    role = State()
    direction = State()
    level = State()
    skills = State()
    goal = State()
    issues = State()
    time = State()
    format = State()


async def set_commands():
    commands = [
        BotCommand(command="start", description="–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏"),
        BotCommand(command="restart", description="–°–±—Ä–æ—Å–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"),
        BotCommand(command="check", description="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É"),
        BotCommand(command="help", description="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"),
    ]
    await bot.set_my_commands(commands)


def is_command(text: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å —Å–∏–º–≤–æ–ª–∞ '/'."""
    return text.strip().startswith("/")


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤)
@dp.message(Command("help"))
async def help_handler(message: types.Message, state: FSMContext):
    await state.clear()
    help_text = (
        "<b>–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "/start ‚Äì –Ω–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏\n"
        "/restart ‚Äì —Å–±—Ä–æ—Å–∏—Ç—å –∑–∞—è–≤–∫—É –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/check ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É\n"
        "/help ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )
    await message.answer(help_text, parse_mode=ParseMode.HTML)


@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    welcome_text = (
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ!\n"
        "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É, –ø–æ—Å–ª–µ —á–µ–≥–æ –∑–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞—à–µ–º—É –º–µ–Ω—Ç–æ—Ä—É.\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º!\n\n"
        "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
    await state.set_state(MentorForm.name)
    await message.answer(welcome_text, parse_mode=ParseMode.HTML)


@dp.message(Command("restart"))
async def restart_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–°–±—Ä–æ—Å –∑–∞—è–≤–∫–∏. –ù–∞—á–∏–Ω–∞–µ–º —Å–Ω–∞—á–∞–ª–∞.\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?", parse_mode=ParseMode.HTML)
    await state.set_state(MentorForm.name)


@dp.message(Command("check"))
async def check_handler(message: types.Message):
    chat_id = message.chat.id
    if chat_id in submitted_applications:
        data = submitted_applications[chat_id]
        result_text = (
            "<b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ:</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {data.get('name')}\n"
            f"üíº <b>–ö—Ç–æ —Å–µ–π—á–∞—Å:</b> {data.get('role')}\n"
            f"üéØ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {data.get('direction')}\n"
            f"üìä <b>–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:</b> {data.get('level')}\n"
            f"üõ† <b>–ù–∞–≤—ã–∫–∏:</b> {data.get('skills')}\n"
            f"üèÜ <b>–¶–µ–ª—å:</b> {data.get('goal')}\n"
            f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã:</b> {data.get('issues')}\n"
            f"‚è≥ <b>–í—Ä–µ–º—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ:</b> {data.get('time')}\n"
            f"üìû <b>–§–æ—Ä–º–∞—Ç –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞:</b> {data.get('format')}\n"
        )
        await message.answer(result_text, parse_mode=ParseMode.HTML)
    else:
        await message.answer("–ó–∞—è–≤–∫–∞ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –µ—ë –∫–æ–º–∞–Ω–¥–æ–π /start.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
@dp.message(MentorForm.name)
async def process_name(message: types.Message, state: FSMContext):
    if is_command(message.text):
        await message.answer("–ö–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è.")
        return
    await state.update_data(name=message.text)
    await message.answer(
        "üë§ <b>–ö—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å?</b> (–°—Ç—É–¥–µ–Ω—Ç, –Ω–∞—á–∏–Ω–∞—é—â–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –æ–ø—ã—Ç–Ω—ã–π –ò–¢-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ —Ç. –¥.)",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(MentorForm.role)


@dp.message(MentorForm.role)
async def process_role(message: types.Message, state: FSMContext):
    if is_command(message.text):
        await message.answer("–ö–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å.")
        return
    await state.update_data(role=message.text)
    await message.answer(
        "üíº <b>–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ò–¢ —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ?</b> (–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞, –ò–ë, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, DevOps, –¥—Ä—É–≥–æ–µ)",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(MentorForm.direction)


@dp.message(MentorForm.direction)
async def process_direction(message: types.Message, state: FSMContext):
    if is_command(message.text):
        await message.answer(
            "–ö–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤ –ò–¢.")
        return
    await state.update_data(direction=message.text)
    await message.answer(
        "üéØ <b>–ö–∞–∫–æ–π —É —Ç–µ–±—è —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π?</b> (–ù–æ–≤–∏—á–æ–∫, –∑–Ω–∞—é –æ—Å–Ω–æ–≤—ã, –µ—Å—Ç—å –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –æ–ø—ã—Ç)",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(MentorForm.level)


@dp.message(MentorForm.level)
async def process_level(message: types.Message, state: FSMContext):
    if is_command(message.text):
        await message.answer(
            "–ö–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π.")
        return
    await state.update_data(level=message.text)
    await message.answer(
        "üìä <b>–ö–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å?</b> (–Ø–∑—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã)",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(MentorForm.skills)


@dp.message(MentorForm.skills)
async def process_skills(message: types.Message, state: FSMContext):
    if is_command(message.text):
        await message.answer("–ö–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –Ω–∞–≤—ã–∫–∏.")
        return
    await state.update_data(skills=message.text)
    await message.answer(
        "üèÜ <b>–ö–∞–∫–∞—è —É —Ç–µ–±—è —Ü–µ–ª—å?</b> (–í–æ–π—Ç–∏ –≤ –ò–¢, —Å–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ø–æ–ª—É—á–∏—Ç—å –æ—Ñ—Ñ–µ—Ä, –ø—Ä–æ–∫–∞—á–∞—Ç—å –Ω–∞–≤—ã–∫–∏)",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(MentorForm.goal)


@dp.message(MentorForm.goal)
async def process_goal(message: types.Message, state: FSMContext):
    if is_command(message.text):
        await message.answer("–ö–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å.")
        return
    await state.update_data(goal=message.text)
    await message.answer(
        "‚ö†Ô∏è <b>–ö–∞–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –º–µ—à–∞—é—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ?</b> (–ù–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å / –Ω–µ—Ç –ø—Ä–∞–∫—Ç–∏–∫–∏ / –Ω–µ –ø—Ä–æ—Ö–æ–∂—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è)",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(MentorForm.issues)


@dp.message(MentorForm.issues)
async def process_issues(message: types.Message, state: FSMContext):
    if is_command(message.text):
        await message.answer("–ö–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã.")
        return
    await state.update_data(issues=message.text)
    await message.answer(
        "‚è≥ <b>–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å –æ–±—É—á–µ–Ω–∏—é?</b> (1-2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å, 5+ —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é –∏ —Ç. –¥.)",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(MentorForm.time)


@dp.message(MentorForm.time)
async def process_time(message: types.Message, state: FSMContext):
    if is_command(message.text):
        await message.answer(
            "–ö–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≥–æ—Ç–æ–≤—ã —É–¥–µ–ª—è—Ç—å –æ–±—É—á–µ–Ω–∏—é.")
        return
    await state.update_data(time=message.text)
    await message.answer(
        "üìû <b>–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞ —Ç–µ–±–µ —É–¥–æ–±–µ–Ω?</b> (–ß–∞—Ç, —Å–æ–∑–≤–æ–Ω—ã, —Ä–∞–∑–±–æ—Ä –∑–∞–¥–∞—á, —Ä–∞–±–æ—Ç–∞ –Ω–∞–¥ –ø—Ä–æ–µ–∫—Ç–æ–º)",
        parse_mode=ParseMode.HTML
    )
    await state.set_state(MentorForm.format)


@dp.message(MentorForm.format)
async def process_format(message: types.Message, state: FSMContext):
    if is_command(message.text):
        await message.answer(
            "–ö–æ–º–∞–Ω–¥—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∞–Ω–∫–µ—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞.")
        return
    await state.update_data(format=message.text)
    data = await state.get_data()

    user_first_name = message.from_user.first_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    user_username = f"@{message.from_user.username}" if message.from_user.username else ""

    result_text = (
        f"<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_first_name} {user_username}!</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {data.get('name')}\n"
        f"üíº <b>–ö—Ç–æ —Å–µ–π—á–∞—Å:</b> {data.get('role')}\n"
        f"üéØ <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b> {data.get('direction')}\n"
        f"üìä <b>–£—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π:</b> {data.get('level')}\n"
        f"üõ† <b>–ù–∞–≤—ã–∫–∏:</b> {data.get('skills')}\n"
        f"üèÜ <b>–¶–µ–ª—å:</b> {data.get('goal')}\n"
        f"‚ö†Ô∏è <b>–ü—Ä–æ–±–ª–µ–º—ã:</b> {data.get('issues')}\n"
        f"‚è≥ <b>–í—Ä–µ–º—è –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ:</b> {data.get('time')}\n"
        f"üìû <b>–§–æ—Ä–º–∞—Ç –º–µ–Ω—Ç–æ—Ä—Å—Ç–≤–∞:</b> {data.get('format')}\n"
    )
    submitted_applications[message.chat.id] = data
    await bot.send_message(ADMIN_CHAT, result_text, parse_mode=ParseMode.HTML)
    await message.answer("‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –º–µ–Ω—Ç–æ—Ä—É. –°–ø–∞—Å–∏–±–æ!", parse_mode=ParseMode.HTML)
    await state.clear()


# –†–µ–∞–ª–∏–∑–∞—Ü–∏—è Health Probe —á–µ—Ä–µ–∑ FastAPI
from fastapi import FastAPI
from fastapi.responses import JSONResponse

health_app = FastAPI()


@health_app.get("/health")
async def health():
    return JSONResponse(content={"status": "ok"})


import uvicorn


async def main():
    await set_commands()
    bot_task = asyncio.create_task(dp.start_polling(bot))
    config = uvicorn.Config(health_app, host="0.0.0.0", port=8080, log_level="info")
    server = uvicorn.Server(config)
    health_task = asyncio.create_task(server.serve())
    await asyncio.gather(bot_task, health_task)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        logger.exception("Error in main: %s", e)
